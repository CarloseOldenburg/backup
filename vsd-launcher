#!/bin/bash

# sudo wget -O /usr/bin/vsd-launcher https://raw.githubusercontent.com/CarloseOldenburg/updater/main/vsd-launcher && sudo chmod +x vsd-launcher && sudo mv vsd-launcher /usr/bin/

# Verifica se está rodando como root
if [[ $EUID -ne 0 ]]; then
   echo "Este script precisa ser executado como root (use sudo)."
   exit 1
fi

VERSION="1.0"
LOG_FILE="/var/log/vsd-launcher.log"
CONFIG_FILE="/opt/videosoft/vs-food-launcher/app/vs-food.sh"

# Check root
if [[ $EUID -ne 0 ]]; then
    echo "Este script precisa ser executado como root (sudo)."
    exit 1
fi

# Log function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') | $1" >> "$LOG_FILE"
}

# Funções operacionais
clear_cache() {
    rm -rf ~/.cache/google-chrome/* ~/.config/google-chrome/*
    log "Cache do Google Chrome limpo."
}

clear_token() {
    clear_cache
    rm -f /opt/videosoft/vs-os-interface/log/_database_token* 2>/dev/null
    rm -f /opt/videosoft/vs-os-interface/log/_database_recovery* 2>/dev/null
    log "Token e arquivos de recuperação excluídos."
}

update_url() {
    local service="$1"
    local version="$2"
    local homolog="$3"
    local new_url=""

    if [[ "$service" == "food" ]]; then
        if [[ "$version" == "2" ]]; then
            [[ "$homolog" == "true" ]] && new_url="https://food2.homolog.vsd.app" || new_url="https://food2.vsd.app"
        else
            [[ "$homolog" == "true" ]] && new_url="https://food.homolog.vsd.app" || new_url="https://food.vsd.app"
        fi
    elif [[ "$service" == "self" ]]; then
        [[ "$homolog" == "true" ]] && new_url="https://selfcheckout.homolog.vsd.app" || new_url="https://selfcheckout.vsd.app"
    else
        log "Erro: Serviço desconhecido."
        return 1
    fi

    if [[ -f "$CONFIG_FILE" ]]; then
        sed -i "s|^\(export \)\?VS_URL_APP=.*|VS_URL_APP=\"$new_url\"|" "$CONFIG_FILE"
        log "URL atualizada para: $new_url"
        return 0
    else
        log "Erro: Arquivo de configuração não encontrado."
        return 2
    fi
}

uninstall() {
    rm -f /usr/bin/vsd-launcher
    rm -f "$LOG_FILE"
    echo "vsd-launcher desinstalado."
    exit 0
}

# Interface menu
while true; do
    OPTION=$(whiptail --title "VSD Launcher" --menu "Escolha uma opção:" 20 60 10 \
        "1" "Atualizar URL" \
        "2" "Limpar cache do Chrome" \
        "3" "Limpar token + cache" \
        "4" "Desinstalar vsd-launcher" \
        "5" "Sair" 3>&1 1>&2 2>&3)

    case $OPTION in
        1)
            SERVICE=$(whiptail --title "Serviço" --menu "Selecione o serviço:" 15 50 2 \
                "food" "Sistema Food" \
                "self" "Selfcheckout" 3>&1 1>&2 2>&3)

            [[ -z "$SERVICE" ]] && continue

            VERSION=$(whiptail --title "Versão" --menu "Versão (apenas para Food):" 15 50 3 \
                "2" "Food 2.0" \
                "3" "Food 3.0 (Padrão)" \
                "none" "Não especificar" 3>&1 1>&2 2>&3)

            [[ "$VERSION" == "none" ]] && VERSION=""

            HOMOLOG=$(whiptail --title "Ambiente" --yesno "Usar ambiente de HOMOLOGAÇÃO?" 10 60 && echo "true" || echo "false")

            update_url "$SERVICE" "$VERSION" "$HOMOLOG"
            status=$?

            if [[ $status -eq 0 ]]; then
                whiptail --title "Sucesso" --msgbox "URL atualizada com sucesso." 10 60
            elif [[ $status -eq 2 ]]; then
                whiptail --title "Erro" --msgbox "Arquivo de configuração não encontrado:\n$CONFIG_FILE" 10 60
            else
                whiptail --title "Erro" --msgbox "Falha ao atualizar a URL." 10 60
            fi
            ;;
        2)
            clear_cache
            whiptail --title "Limpeza" --msgbox "Cache do Google Chrome limpo." 10 60
            ;;
        3)
            clear_token
            whiptail --title "Limpeza" --msgbox "Token e cache limpos." 10 60
            ;;
        4)
            uninstall
            ;;
        5)
            exit 0
            ;;
        *)
            exit 0
            ;;
    esac
done
