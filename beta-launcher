#!/bin/bash

# ========================================
# Beta Launcher - VSD
# Desenvolvido por Carlos Oldenburg
# Versão: 8.2 FINAL
# ========================================

# ========================================
# CONFIGURAÇÕES
# ========================================
VERSION_SISTEMA="8.2"
REPO_URL="https://raw.githubusercontent.com/CarloseOldenburg/updater/main/beta-launcher"
LOG_FILE="/var/log/beta-launcher.log"
BACKUP_DIR="/opt/backup-vsd"
CONFIG_FILE="/opt/videosoft/vs-food-launcher/app/vs-food.sh"

mkdir -p "$BACKUP_DIR"

# ========================================
# CORES PARA TERMINAL
# ========================================
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
CYAN=$(tput setaf 6)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

# ========================================
# FUNÇÃO DE CABEÇALHO
# ========================================
print_header() {
    clear
    echo "==========================================="
    echo -e "     🚀 ${CYAN}Beta Launcher VSD ${VERSION_SISTEMA}${RESET}"
    echo "     Desenvolvido por Carlos Oldenburg"
    echo "==========================================="
    echo ""
}

# ========================================
# FUNÇÃO DE SPINNER
# ========================================
spinner() {
    local pid=$!
    local delay=0.1
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# ========================================
# FUNÇÃO DE LOG
# ========================================
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') | $1" | tee -a "$LOG_FILE" >/dev/null
}

# ========================================
# CHECA ROOT
# ========================================
if [[ $EUID -ne 0 ]]; then
    echo "${RED}Execute como root (use sudo).${RESET}"
    exit 1
fi

# ========================================
# CHECA CONEXÃO
# ========================================
ping -c 1 google.com &>/dev/null || {
    echo "${RED}Sem conexão com a internet. Verifique sua rede.${RESET}"
    exit 1
}

# ========================================
# CHECA E INSTALA DEPENDÊNCIAS UMA VEZ
# ========================================
check_dependencies() {
    MISSING=""
    for pkg in whiptail curl wget dpkg; do
        if ! dpkg -l | grep -qw "$pkg"; then
            MISSING="$MISSING $pkg"
        fi
    done

    if [[ -n "$MISSING" ]]; then
        log "Instalando dependências: $MISSING"
        sudo apt update -y && sudo apt install -y $MISSING
    fi
}

check_dependencies

# ========================================
# BACKUP AUTOMÁTICO
# ========================================
backup() {
    DATE=$(date +"%Y-%m-%d_%H-%M-%S")
    mkdir -p "$BACKUP_DIR/$DATE"
    cp -r /opt/videosoft/* "$BACKUP_DIR/$DATE" 2>/dev/null
    log "Backup realizado em $BACKUP_DIR/$DATE"
}

# ========================================
# ATUALIZAR URL
# ========================================
update_url() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        whiptail --title "Erro" --msgbox "Arquivo de configuração não encontrado:\n$CONFIG_FILE" 10 60
        log "Arquivo não encontrado: $CONFIG_FILE"
        return
    fi

    SERVICE=$(whiptail --title "Serviço" --menu "Selecione o serviço:" 15 50 2 \
        "food" "Sistema Food" \
        "self" "Selfcheckout" 3>&1 1>&2 2>&3)

    [[ -z "$SERVICE" ]] && return

    if [[ "$SERVICE" == "food" ]]; then
        VERSION_OPTION=$(whiptail --title "Versão" --menu "Versão (Food apenas):" 15 50 3 \
            "2" "Food 2.0" \
            "3" "Food 3.0 (Padrão)" \
            "none" "Não especificar" 3>&1 1>&2 2>&3)
        [[ "$VERSION_OPTION" == "none" ]] && VERSION_OPTION=""
    else
        VERSION_OPTION=""
    fi

    if whiptail --defaultno --title "Ambiente" --yesno "Usar ambiente de HOMOLOGAÇÃO?" 10 60; then
        HOMOLOG="true"
    else
        HOMOLOG="false"
    fi

    if [[ "$SERVICE" == "food" ]]; then
        if [[ "$VERSION_OPTION" == "2" ]]; then
            [[ "$HOMOLOG" == "true" ]] && NEW_URL="https://food2.homolog.vsd.app" || NEW_URL="https://food2.vsd.app"
        else
            [[ "$HOMOLOG" == "true" ]] && NEW_URL="https://food.homolog.vsd.app" || NEW_URL="https://food.vsd.app"
        fi
    elif [[ "$SERVICE" == "self" ]]; then
        [[ "$HOMOLOG" == "true" ]] && NEW_URL="https://selfcheckout.homolog.vsd.app" || NEW_URL="https://selfcheckout.vsd.app"
    fi

    sed -i "s|^VS_URL_APP=.*|VS_URL_APP=\"$NEW_URL\"|" "$CONFIG_FILE"

    log "URL atualizada para: $NEW_URL"
    whiptail --title "Sucesso" --msgbox "✅ URL atualizada para:\n$NEW_URL" 10 60
}

# ========================================
# LIMPAR CACHE
# ========================================
clear_cache() {
    rm -rf ~/.cache/google-chrome/* ~/.config/google-chrome/*
    log "Cache do Chrome limpo."
    whiptail --title "Limpeza de Cache" --msgbox "Cache do Google Chrome limpo com sucesso." 10 60
}

# ========================================
# LIMPAR TOKEN + CACHE
# ========================================
clear_token() {
    clear_cache
    rm -f /opt/videosoft/vs-os-interface/log/_database_token* 2>/dev/null
    rm -f /opt/videosoft/vs-os-interface/log/_database_recovery* 2>/dev/null
    log "Token e arquivos de recuperação excluídos."
    whiptail --title "Limpeza" --msgbox "Token e cache limpos com sucesso." 10 60
}

# ========================================
# STATUS DOS MÓDULOS
# ========================================
check_status() {
    STATUS_OS=$(sudo service vs-os-interface status | grep Active || echo "Não encontrado")
    STATUS_AUTOPAG=$(sudo service vs-autopag-se status | grep Active || echo "Não encontrado")

    whiptail --title "Status dos Módulos" --msgbox "🖥️ Status Local:
vs-os-interface: $STATUS_OS
vs-autopag-se: $STATUS_AUTOPAG" 15 70
}

# ========================================
# REINICIAR MÓDULOS
# ========================================
restart_modules() {
    sudo service vs-os-interface restart
    sudo service vs-autopag-se restart
    log "Módulos reiniciados"
    whiptail --title "Reiniciar Módulos" --msgbox "Módulos foram reiniciados com sucesso!" 10 60
}

# ========================================
# ATUALIZAR LAUNCHER
# ========================================
update_launcher() {
    wget -O /usr/bin/beta-launcher "$REPO_URL" && chmod +x /usr/bin/beta-launcher
    log "Launcher atualizado."
    whiptail --title "Atualização" --msgbox "Launcher atualizado com sucesso!\nReiniciando..." 10 60
    exec /usr/bin/beta-launcher
}

# ========================================
# LOGS
# ========================================
show_logs() {
    if [[ -f "$LOG_FILE" ]]; then
        whiptail --textbox "$LOG_FILE" 25 70
    else
        whiptail --title "Logs" --msgbox "Arquivo de log não encontrado." 10 60
    fi
}

clear_logs() {
    if whiptail --yesno "Deseja realmente apagar TODOS os logs?" 10 60; then
        > "$LOG_FILE"
        whiptail --title "Apagar Logs" --msgbox "Logs apagados com sucesso." 10 60
    fi
}

# ========================================
# INFO
# ========================================
show_info() {
    whiptail --title "Informações" --msgbox "Beta Launcher\nVersão: $VERSION_SISTEMA\nDesenvolvido por: Carlos Oldenburg\nRepositório: $REPO_URL" 12 60
}

# ========================================
# DESINSTALAR
# ========================================
uninstall() {
    rm -f /usr/bin/beta-launcher
    rm -f "$LOG_FILE"
    whiptail --title "Desinstalado" --msgbox "Launcher removido com sucesso." 10 60
    exit 0
}

# ========================================
# MENU
# ========================================
while true; do
    print_header
    OPTION=$(whiptail --title "Beta Launcher" --menu "Escolha uma opção:" 25 70 15 \
        "1" "🔄 Atualizar beta-launcher" \
        "2" "🌐 Atualizar URL" \
        "3" "🧹 Limpar cache do Chrome" \
        "4" "🧹 Limpar token + cache" \
        "5" "📦 Gerenciar Módulos" \
        "6" "🔍 Verificar Status dos Módulos" \
        "7" "🔁 Reiniciar Módulos" \
        "8" "📄 Ver Logs" \
        "9" "🗑️ Apagar Logs" \
        "10" "❌ Desinstalar beta-launcher" \
        "11" "ℹ️ Info" \
        "12" "🚪 Sair" 3>&1 1>&2 2>&3)

    case $OPTION in
        1) update_launcher ;;
        2) update_url ;;
        3) clear_cache ;;
        4) clear_token ;;
        5) manage_modules ;;
        6) check_status ;;
        7) restart_modules ;;
        8) show_logs ;;
        9) clear_logs ;;
        10) uninstall ;;
        11) show_info ;;
        12) exit ;;
        *) exit ;;
    esac
done
