#!/bin/bash

# ========================================
# Beta Launcher - VSD
# Desenvolvido por Carlos Eduardo Oldenburg
# Versão: 7.1
# ========================================

# ========================================
# CONFIGURAÇÕES
# ========================================
VERSION_SISTEMA="7.1"
REPO_URL="https://raw.githubusercontent.com/CarloseOldenburg/updater/main/beta-launcher"
LOG_FILE="/var/log/beta-launcher.log"
BACKUP_DIR="/opt/backup-vsd"

mkdir -p "$BACKUP_DIR"

# ========================================
# FUNÇÃO DE LOG
# ========================================
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') | $1" | sudo tee -a "$LOG_FILE" >/dev/null
}

# ========================================
# CHECA ROOT
# ========================================
if [[ $EUID -ne 0 ]]; then
    echo "Execute como root (use sudo)."
    exit 1
fi

# ========================================
# CHECA DEPENDÊNCIAS
# ========================================
if ! dpkg -l | grep -qw whiptail; then
    log "Instalando dependências necessárias..."
    sudo apt update -y && sudo apt install -y whiptail curl
fi

# ========================================
# BACKUP AUTOMÁTICO
# ========================================
backup() {
    DATE=$(date +"%Y-%m-%d_%H-%M-%S")
    mkdir -p "$BACKUP_DIR/$DATE"
    cp -r /opt/videosoft/* "$BACKUP_DIR/$DATE" 2>/dev/null
    log "Backup realizado em $BACKUP_DIR/$DATE"
}

# ========================================
# VERIFICAÇÃO DE STATUS DOS MÓDULOS (LOCAL)
# ========================================
check_status() {
    STATUS_LOCAL_OS=$(sudo service vs-os-interface status | grep Active || echo "Não encontrado")
    STATUS_LOCAL_AUTOPAG=$(sudo service vs-autopag-se status | grep Active || echo "Não encontrado")

    whiptail --title "Status dos Módulos" --msgbox "🖥️ Status Local:
vs-os-interface: $STATUS_LOCAL_OS
vs-autopag-se: $STATUS_LOCAL_AUTOPAG" 15 70
}

# ========================================
# REINICIAR MÓDULOS
# ========================================
restart_modules() {
    sudo service vs-os-interface restart
    sudo service vs-autopag-se restart

    log "Módulos reiniciados (vs-os-interface e vs-autopag-se)"
    whiptail --title "Reiniciar Módulos" --msgbox "Módulos foram reiniciados com sucesso!" 10 60
}

# ========================================
# ATUALIZAÇÃO DO LAUNCHER COM REINICIO
# ========================================
update_launcher() {
    wget -O /usr/bin/beta-launcher "$REPO_URL" && chmod +x /usr/bin/beta-launcher
    log "Atualização do launcher concluída."
    whiptail --title "Atualização" --msgbox "Launcher atualizado com sucesso!\nReiniciando..." 10 60
    exec /usr/bin/beta-launcher
    exit
}

# ========================================
# VER LOGS
# ========================================
show_logs() {
    if [[ -f "$LOG_FILE" ]]; then
        whiptail --textbox "$LOG_FILE" 25 70
    else
        whiptail --title "Logs" --msgbox "Arquivo de log não encontrado." 10 60
    fi
}

# ========================================
# APAGAR LOGS
# ========================================
clear_logs() {
    > "$LOG_FILE"
    whiptail --title "Apagar Logs" --msgbox "Logs apagados com sucesso." 10 60
}

# ========================================
# LIMPAR CACHE
# ========================================
clear_cache() {
    rm -rf ~/.cache/google-chrome/* ~/.config/google-chrome/*
    log "Cache do Chrome limpo."
}

# ========================================
# LIMPAR TOKEN + CACHE
# ========================================
clear_token() {
    clear_cache
    rm -f /opt/videosoft/vs-os-interface/log/_database_token* 2>/dev/null
    rm -f /opt/videosoft/vs-os-interface/log/_database_recovery* 2>/dev/null
    log "Token e arquivos de recuperação excluídos."
}

# ========================================
# INFO DO SISTEMA
# ========================================
show_info() {
    whiptail --title "Informações do Sistema" --msgbox "Beta Launcher\nVersão: $VERSION_SISTEMA\nDesenvolvido por: Carlos Eduardo Oldenburg\nRepositório: $REPO_URL" 12 60
}

# ========================================
# INSTALAÇÃO DE MÓDULOS
# ========================================
install_module() {
    NOME="$1"
    VERSAO="$2"
    URL="$3"

    backup

    log "Baixando $NOME versão $VERSAO"
    wget "$URL" -O "${NOME}_${VERSAO}.deb"
    log "Instalando $NOME..."
    sudo dpkg -i "${NOME}_${VERSAO}.deb" 2>&1 | tee -a "$LOG_FILE" || sudo apt-get install -f -y
}

# ========================================
# MENU DE MÓDULOS
# ========================================
manage_modules() {
    MODULE=$(whiptail --title "Gerenciar Módulos" --menu "Escolha o módulo:" 20 60 10 \
        "1" "vs-autopag" \
        "2" "vs-os-interface" \
        "3" "ifood" 3>&1 1>&2 2>&3)

    [[ -z "$MODULE" ]] && return

    case $MODULE in
        1) install_autopag ;;
        2) install_os_interface ;;
        3) install_ifood ;;
    esac
}

install_autopag() {
    VERSION=$(whiptail --title "vs-autopag" --menu "Escolha a versão:" 15 50 4 \
        "2.33.7" "" \
        "2.33.3" "" \
        "2.32.2" "" 3>&1 1>&2 2>&3)

    [[ -z "$VERSION" ]] && return

    install_module "vs-autopag-se" "$VERSION" "https://cdn.vsd.app/softwares/vs-autopag-se/$VERSION/vs-autopag-se_${VERSION}_amd64.deb"
}

install_os_interface() {
    VERSION=$(whiptail --title "vs-os-interface" --menu "Escolha a versão:" 15 50 5 \
        "2.28.4" "" \
        "2.28.2" "" \
        "2.28.0" "" \
        "2.24.0" "" 3>&1 1>&2 2>&3)

    [[ -z "$VERSION" ]] && return

    install_module "vs-os-interface" "$VERSION" "https://cdn.vsd.app/softwares/vs-os-interface/$VERSION/vs-os-interface_${VERSION}_amd64.deb"
}

install_ifood() {
    VERSION=$(whiptail --title "iFood (vsd-payment + pinpad)" --menu "Escolha o combo de versão:" 15 60 3 \
        "1" "vsd-payment 1.2.1 + pinpad-server 3.10.0" \
        "2" "vsd-payment 1.4.0 + pinpad-server 3.10.0" 3>&1 1>&2 2>&3)

    [[ -z "$VERSION" ]] && return

    backup

    log "Removendo módulos antigos do iFood..."
    sudo apt purge -y vsd-payment pinpad-server 2>&1 | tee -a "$LOG_FILE"
    sudo rm -rf /home/videosoft/.pinpad_server 2>/dev/null
    sudo rm -f /home/videosoft/DesktopPlugin.db 2>/dev/null

    case $VERSION in
        1) PAYMENT="1.2.1" ;;
        2) PAYMENT="1.4.0" ;;
    esac

    log "Baixando novos módulos..."
    wget https://cdn.vsd.app/softwares/vsd-payment/prod/vsd-payment_${PAYMENT}_amd64.deb
    wget https://github.com/getzoop/zoop-package-public/releases/download/zoop-desktop-server_3.10.0-beta/pinpad-server-installer_linux_3.10.0-beta.deb

    log "Instalando módulos..."
    sudo dpkg -i pinpad-server-installer_linux_3.10.0-beta.deb 2>&1 | tee -a "$LOG_FILE"
    sudo dpkg -i vsd-payment_${PAYMENT}_amd64.deb 2>&1 | tee -a "$LOG_FILE"
}

# ========================================
# DESINSTALAR LAUNCHER
# ========================================
uninstall() {
    rm -f /usr/bin/beta-launcher
    rm -f "$LOG_FILE"
    whiptail --title "Desinstalado" --msgbox "beta-launcher foi desinstalado com sucesso." 10 60
    exit 0
}

# ========================================
# MENU PRINCIPAL
# ========================================
while true; do
    OPTION=$(whiptail --title "Beta Launcher" --menu "Escolha uma opção:" 20 60 12 \
        "1" "🔄 Atualizar beta-launcher" \
        "2" "🌐 Atualizar URL" \
        "3" "🧹 Limpar cache do Chrome" \
        "4" "🧹 Limpar token + cache" \
        "5" "📦 Gerenciar Módulos" \
        "6" "🔍 Verificar Status dos Módulos" \
        "7" "📄 Ver Logs" \
        "8" "🗑️ Apagar Logs" \
        "9" "❌ Desinstalar beta-launcher" \
        "10" "ℹ️ Info" \
        "11" "🚪 Sair" \
        "12" "🔁 Reiniciar Módulos" 3>&1 1>&2 2>&3)

    case $OPTION in
        1) update_launcher ;;
        2) update_url ;;
        3) clear_cache ;;
        4) clear_token ;;
        5) manage_modules ;;
        6) check_status ;;
        7) show_logs ;;
        8) clear_logs ;;
        9) uninstall ;;
        10) show_info ;;
        11) exit 0 ;;
        12) restart_modules ;;
        *) exit 0 ;;
    esac
done
